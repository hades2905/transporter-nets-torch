import numpy as np
from ravens_torch.tasks.task import Task
from ravens_torch.utils import utils


class StackAndUnstack(Task):
    """Stack and Unstack task - Custom Multi-Step Manipulation"""

    def __init__(self):
        super().__init__()
        self.max_steps = 20  # Increase steps for multi-step task
        self.base_pose = None  # Store base pose
        self.disk_sizes = []  # Track disk sizes for sorting

    def reset(self, env):
        super().reset(env)
        self._add_instance(env)

    def _add_instance(self, env):
        # Add stand (base platform)
        base_size = (0.12, 0.36, 0.01)
        base_urdf = 'hanoi/stand.urdf'
        self.base_pose = self.get_random_pose(env, base_size)
        env.add_object(base_urdf, self.base_pose, 'fixed')

        # Rod positions in base coordinates (3 rods)
        rod_pos = ((0, -0.12, 0.03), (0, 0, 0.03), (0, 0.12, 0.03))

        # Create disks
        n_disks = 3
        disks = []
        self.disk_sizes = [0.03, 0.02, 0.01]  # Example sizes for sorting

        for i in range(n_disks):
            disk_urdf = 'hanoi/disk%d.urdf' % i
            pos = utils.apply(self.base_pose, rod_pos[0])
            z = 0.015 * (n_disks - i - 2)
            pos = (pos[0], pos[1], pos[2] + z)
            disks.append(env.add_object(disk_urdf, (pos, self.base_pose[1])))

        # Create multi-step manipulation goal: stack and then unstack
        self.goals = []

        # Step 1: Stack the disks in ascending order on the second rod
        self._stack_disks_on_rod(disks, rod_pos[1], order="ascending")

        # Step 2: Unstack the disks and return to the first rod
        self._unstack_disks_on_rod(disks, rod_pos[0])

        # Step 3: Stack the disks in descending order on the third rod
        self._stack_disks_on_rod(disks, rod_pos[2], order="descending")

    def _stack_disks_on_rod(self, disks, target_rod_pos, order="ascending"):
        """Stack disks on a given rod in the specified order (ascending/descending)."""
        target_rod_pos = utils.apply(self.base_pose, target_rod_pos)

        # Sort disks by size
        if order == "ascending":
            sorted_disks = sorted(zip(disks, self.disk_sizes), key=lambda x: x[1])  # Sort by size (smallest to largest)
        else:  # Descending
            sorted_disks = sorted(zip(disks, self.disk_sizes), key=lambda x: -x[1])  # Sort by size (largest to smallest)

        for i, (disk_id, _) in enumerate(sorted_disks):
            z_offset = 0.015 * i  # Stack the disks on top of each other
            target_pos = (target_rod_pos[0], target_rod_pos[1], target_rod_pos[2] + z_offset)
            target_pose = (target_pos, (0, 0, 0, 1))
            self.goals.append(([(disk_id, (0, None))], np.int32([[1]]), [target_pose], False, True, 'pose', None, 1 / len(sorted_disks)))

    def _unstack_disks_on_rod(self, disks, target_rod_pos):
        """Unstack disks from a rod, moving them back to the initial positions."""
        target_rod_pos = utils.apply(self.base_pose, target_rod_pos)

        for i, disk_id in enumerate(disks):
            z_offset = 0.015 * (len(disks) - i - 1)  # Unstack the disks from top to bottom
            target_pos = (target_rod_pos[0], target_rod_pos[1], target_rod_pos[2] + z_offset)
            target_pose = (target_pos, (0, 0, 0, 1))
            self.goals.append(([(disk_id, (0, None))], np.int32([[1]]), [target_pose], False, True, 'pose', None, 1 / len(disks)))
